Zu zeigen: tail (init xs) = init (tail xs)

Induktionsanfang:
	tail(init (x:y:[])) = tail(x: init [y])
			    = tail(x:[])		(init.2)	
			    = []			(tail.1)
	init(tail (x:y:[])) = init(y:[])		(tail.1)
			    = []			(init.1)

Induktionsvoraussetzung:
	tail (init xs) = init (tail xs))	xs hat min. 2 Elemente

Induktionsbehauptung:
	tail (init (x:xs)) = init (tail (x:xs))

Induktionsschritt:

	tail (init (x:xs)  = tail (x: init(xs))	(init.2)
			   = init xs		(tail.1) 
	init (tail (x:xs)) = init xs            (tail.1) 

q.e.d.


Definitionen:
tail (_ : xs) = xs                 		(tail.1)

init [x]      = []                 		(init.1)
init (x:xs)   = x : init xs        		(init.2)



Es kann auf die Bedingung "mindestens 2 Elemente" nicht verzichtet werden, da es sonst zu undefinierten Fällen kommt. Sowohl tail als auch init
entfernen ein Element aus einer Liste. Also werden bei tail(init xs) und init(tail xs) jeweils zwei Elemente entfernt. Damit die Funktion also
funktioniert, werden in der Liste xs mindestens zwei Elemente benötigt, die entfernt werden können.


