takeWhile           :: (a -> Bool) -> [a] -> [a]
takeWhile p []       = []                           -- tw1
takeWhile p (x:xs)                                  -- tw2
	 | p x       = x : takeWhile p xs           -- tw2.1
	 | otherwise = []                           -- tw2.2

dropWhile           :: (a -> Bool) -> [a] -> [a]
dropWhile p []       = []                           -- dw1
dropWhile p xs@(x:xs')                              -- dw2
	 | p x       = dropWhile p xs'              -- dw2.1
	 | otherwise = xs                           -- dw2.2

span                :: (a -> Bool) -> [a] -> ([a],[a])
span p []            = ([],[])                       -- span1
span p xs@(x:xs')                                    -- span2
	 | p x       = (x:ys, zs)
	 | otherwise = ([],xs)
                       where (ys,zs) = span p xs'

--------------------------------------------------------------
span p l = (takeWhile p l, dropWhile p l) 
--------------------------------------------------------------

Induktionsanfang:
takeWhile p [] = [] (tw1)
dropWhile p [] = [] (dw1)
-> (takeWhile p [], dropWhile p []) == ([],[]) == span p [] (span1)

Induktionsvoraussetzung:
span p xs = (takeWhile p xs, dropWhile p xs)

Induktionsbehauptung:
span p (x:xs) = (takeWhile p (x:xs), dropWhile p (x:xs))

Induktionsschritt:
span p xs@(x:xs') =
	| not (p x)	= ([],xs)
			== (tw2.2, dw2.2)
	| p x		= (x:ys, zs)
			where  (ys,zs) 0 span p xs'
			== (x : takeWhile p xs', dropwhile xs')
			== (tw2.1, dw2.1)
q.e.d.
